      SUBROUTINE NORMAL
      COMMON /COSANG/ COSA,COSB,COSG
      COMMON /MATR2/ U(9),T(9)
      COMMON /TYPE/ ITYPE
      COMMON /VAR1/ VAR90
C**
      COMMON /CK02/ ICK021,ICK022,ICK023,ICK024,ICK025,ICK026,ICK027,
     $              ICK028,ICK029
C*
C
C
C     SUBROUTINE 'NORMAL' ...
C        PUT CELL MATRIX IN NORMAL REPRESENTATION
C
C
C     THE CELL IS SET AS A TYPE 1 OR TYPE 2 CELL ...
C     TYPE 1 CELL = (+++) ALL ANGLES LESS THAN 90 DEGREES
C                         ( COS(ANGLES) ARE ALL > THAN ZERO )
C     TYPE 2 CELL = (---) ALL ANGLES EQUAL TO OR GREATER THAN 90 DEGREES
C                         ( COS(ANGLES) ARE ALL <= TO ZERO )
C
C     IF NECESSARY, THIS SUBROUTINE CHANGES THE SIGNS ON THE UNSYMMETRIC
C     SCALARS (S23, S13, S12) SO THAT THEY ARE ALL POSITIVE, ALL
C     NEGATIVE, OR ZERO AND NEGATIVE.  ALSO, THE TOTAL TRANSFORMATION
C     MATRIX IS UPDATED.
C
C
C     --- INITIALIZE VARIABLES
      ITYPE = 0
C
      ACOSA = ABS(COSA)
      ACOSB = ABS(COSB)
      ACOSG = ABS(COSG)
C
C     --- VARIABLES ISGN-- INDICATE WHETHER THE UNSYMMETRICAL SCALARS
C         (S23, S13, S12) ARE ZERO, POSITIVE OR NEGATIVE (THIS CODE
C         USES THE COS(ANGLES) AS AN INDICATION OF THE SIGNS)
      ISGN23 = -1
      ISGN13 = -1
      ISGN12 = -1
      IF(COSA.GT.VAR90)  ISGN23 = 1
      IF(COSB.GT.VAR90)  ISGN13 = 1
      IF(COSG.GT.VAR90)  ISGN12 = 1
      IF(ACOSA.LE.VAR90) ISGN23 = 0
      IF(ACOSB.LE.VAR90) ISGN13 = 0
      IF(ACOSG.LE.VAR90) ISGN12 = 0
C
C     --- INITIALIZE MATRIX ARRAY U TO IDENTITY MATRIX
      CALL SET
      U(1) = 1.0
      U(5) = 1.0
      U(9) = 1.0
C
C     --- TYPE 1 CELL IF PRODUCT OF SIGNS OF UNSYMMETRICAL SCALARS IS +1
C         TYPE 2 CELL IF PRODUCT IS -1 OR 0
      IPROD = ISGN23*ISGN13*ISGN12
C
C     --- PUT THE CELL MATRIX IN NORMAL REPRESENTATION
      IF(IPROD.EQ.0.OR.IPROD.EQ.-1) GO TO 100
C
C        --- TYPE 1 CELL ... POSITIVE REDUCED FORM
C            SET UNSYMMETRICAL SCALARS TO BE POSITIVE (ALL ANGLES
C            LESS THAN 90 DEGREES)
         ITYPE = 1
C
C        --- UPDATE TRANSFORMATION MATRIX
         IF(ISGN23.EQ.-1) U(1) = -1.0
         IF(ISGN13.EQ.-1) U(5) = -1.0
         IF(ISGN12.EQ.-1) U(9) = -1.0
         GO TO 200
  100 CONTINUE
C
C     --- TYPE 2 CELL ... NEGATIVE REDUCED FORM
C         SET UNSYMMETRICAL SCALARS TO BE LESS THAN OR EQUAL TO ZERO
C         (ALL ANGLES >= 90 DEGREES)
      ITYPE = 2
C
C     --- UPDATE TRANSFORMATION MATRIX
      IF(ISGN23.EQ.1) U(1) = -1.0
      IF(ISGN13.EQ.1) U(5) = -1.0
      IF(ISGN12.EQ.1) U(9) = -1.0
C
C     --- HAVE ONE OR MORE 90 DEGREE ANGLES IF IPROD = 0
      IF(IPROD.NE.0) GO TO 200
C
C        --- CHECK WHETHER OR NOT MUST REVERSE DIRECTION OF ONE
C            ADDITIONAL VECTOR TO MAINTAIN A RIGHT-HANDED SYSTEM
         IREV23 = ISGN23
         IREV13 = ISGN13
         IREV12 = ISGN12
         IF(ISGN23.EQ.0) IREV23 = -1
         IF(ISGN13.EQ.0) IREV13 = -1
         IF(ISGN12.EQ.0) IREV12 = -1
         IPROD = IREV23*IREV13*IREV12
         IF(IPROD.EQ.-1) GO TO 200
C
C           --- MUST REVERSE DIRECTION OF ONE VECTOR TO MAINTAIN A
C               RIGHT-HANDED SYSTEM
            IF(ISGN23.EQ.0) U(1) = -1.0
            IF(ISGN23.EQ.0) GO TO 200
            IF(ISGN13.EQ.0) U(5) = -1.0
            IF(ISGN13.EQ.0) GO TO 200
            IF(ISGN12.EQ.0) U(9) = -1.0
  200 CONTINUE
C
C     --- UPDATE THE TOTAL TRANSFORMATION MATRIX AND APPLY THE
C         RESULTING MATRIX TO THE INPUT CELL.  TO UPDATE THE TOTAL
C         TRANSFORMATION MATRIX, THE PROGRAM PREMULTIPLIES THE
C         CURRENT MATRIX BY AN UPDATE MATRIX U.  IN THIS ROUTINE, U
C         MAY BE (-1 0 0 / 0 -1 0 / 0 0 1), (-1 0 0 / 0 1 0 / 0 0 -1)
C         OR (1 0 0 / 0 -1 0 / 0 0 -1).
      CALL MULTIP
      CALL TRANS(0)
C**
C     --- FOR CHECKING, WRITE EXECUTION POINT AND INTERMEDIATE VARIABLES
      IF(ICK025.EQ.1) CALL CKPT02(9)
C*
C
C     --- STOP PROGRAM EXECUTION IF PROGRAM FAILS TO TYPE
C         CELL MATRIX (SHOULD NOT OCCUR)
      IF(ITYPE.EQ.0) STOP
     $  '*NORMAL* ERROR ... Failed to type cell matrix.'
      RETURN
      END
